
========
Shaker Components
========

Shaker is comprised of three components that work together in various ways depending on the environment.

Shaker Core
###############
.. image:: images/shaker_core.png
   :scale: 80%
Shaker Core is the foundation of Shaker. It alone has the ability to parse shaker.json configuration files, compute and resolve rollup dimensions and dependencies, and ultimately generate rollup metadata.

Shaker Compiler
##########

.. image:: images/shaker_compiler.png
   :scale: 80%

The Shaker compiler is the build time component of Shaker. It employs Shaker Core to generate the metadata and uses it to create the rollups for the application.

Shaker compiler can be configured per environment (staging, test, production) through application.json and you can also decide what actions to apply to the rollups (minify, js/csslint, etc). Moreover you can set what we call "deployment tasks" which allow developers to deploy rollups to different places:

- ``raw`` - Deploy the assets without doing rollups. This mode will pick the files directly from local (handy for development).

- ``local`` - Compile rollups and output files locally.

- ``mobstor`` - Compile rollups and upload them to Mobstor (Yahoo! CDN).

- ``s3`` - Compile rollups and upload them to Amazon S3 CDN.


Shaker Addon and ShakerHTMLFrame
##########

.. image:: images/shaker_addon.png
   :scale: 80%

The Shaker Mojito addon is the run time component of Shaker. It reads the metadata generated by the Screwdriver compiler, and subsequently manages assets within the application, picking the correct rollup based on the current environment. 

The ShakerHTMLFrame is just a copy of Mojito HTMLFrame but including the addon and executing Shaker in a specific point in time.
If you have your own HTMLFrame you just have to include the addon dependency and execute it before the assets get pushed throw the view.


All the pieces together
#######################
This is how all the components get orchestrated together: 

Build time:
------------
	#. Shaker command gets executed invoking ShakerCompiler.
	#. Shaker compiler gets the application configuration and calls ShakerCore .
	#. ShakerCore will analyze all the application resources, and will return a metadata object with all the information about how to do the rollups.
	#. ShakerCompiler takes the previous generated metadata, and generate the minified precomputed rollups, and output them as files or to CDN.
	#. ShakerCompiler output a new metadata file which will be picked up on runtime for picking the correct rollup regarding the context.

Runtime:
---------
	#. Mojito server will automatically pick the generated metadata file.
	#. When a request arrives, mojito computes everything normally until it reaches the ShakerHTMLFrame. Then the runtime addon gets executed.
	#. The ShakerAddon checks the current context and the executed Mojits, and picks from the metadata the most adecuated rollup to include into the page, overriding the necessary default mojito assets.
	#. If the client side gets deployed, Shaker also deploys itself to the client to serve future mojit calls.


