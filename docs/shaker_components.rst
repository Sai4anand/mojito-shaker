
========
Shaker Components
========

Shaker is comprised of three components that work together in various ways depending on the environment.

Shaker Core
###############
.. image:: images/shaker_core.png
   :scale: 80%
<<<<<<< HEAD
Shaker Core is the foundation of Shaker. It alone has the ability to parse ``shaker.json`` configuration files, compute and resolve rollup dimensions and dependencies, and ultimately generate rollup metadata.
=======
Shaker Core is the foundation of Shaker. It alone has the ability to parse shaker.json configuration files, compute and resolve rollup dimensions and dependencies, and ultimately generate rollup metadata.
>>>>>>> Restructured shaker in preparation for open sourcing

Shaker Compiler
##########

.. image:: images/shaker_compiler.png
   :scale: 80%

The Shaker compiler is the build time component of Shaker. It employs Shaker Core to generate the metadata and uses it to create the rollups for the application.

<<<<<<< HEAD
Shaker compiler can be configured per environment (staging, test, production) through ``application.json`` and you can also decide what actions to apply to the rollups (minify, js/csslint, etc). Moreover, you can set what we call "deployment tasks" which allow developers to deploy rollups to different places:

- ``raw`` - Deploy the assets without doing rollups. This mode will pick the files directly from disk (handy for development).

- ``local`` - Compile rollups and output files locally.

=======
Shaker compiler can be configured per environment (staging, test, production) through application.json and you can also decide what actions to apply to the rollups (minify, js/csslint, etc). Moreover you can set what we call "deployment tasks" which allow developers to deploy rollups to different places:

- ``raw`` - Deploy the assets without doing rollups. This mode will pick the files directly from local (handy for development).

- ``local`` - Compile rollups and output files locally.

- ``mobstor`` - Compile rollups and upload them to Mobstor (Yahoo! CDN).

>>>>>>> Restructured shaker in preparation for open sourcing
- ``s3`` - Compile rollups and upload them to Amazon S3 CDN.


Shaker Addon and ShakerHTMLFrame
##########

.. image:: images/shaker_addon.png
   :scale: 80%

<<<<<<< HEAD
The Shaker Mojito addon is the runtime component of Shaker. It reads the metadata generated by the Shaker compiler, and subsequently manages assets within the application, picking the correct rollup based on the current environment.

The ShakerHTMLFrame is a copy of the Mojito HTMLFrame, but it additionally includes the addon and executes Shaker automatically.


Putting The Pieces Together
#######################
This is how all the components work together:

Build time:
------------
    #. The shaker command gets executed, invoking the Shaker compiler.
    #. The Shaker compiler gets the application configuration and calls Shaker core .
    #. Shaker core analyzes all the application resources, and returns a metadata object with all the information necessary to create the rollups.
    #. The Shaker compiler takes the previously generated metadata, generates the minified precomputed rollups, and outputs them as files or uploads them to CDN.
    #. The Shaker compiler outputs a new metadata file which will be picked up at runtime and used to determine the correct rollup based on the current context.

Runtime:
---------
    #. The Mojito server automatically picks the generated metadata file.
    #. When a request arrives, Mojito computes everything normally until it reaches the ShakerHTMLFrame. Then the Shaker runtime addon gets executed.
    #. The Shaker addon checks the current context and the executed mojits, and picks from the metadata file the most appropriate rollup to include into the page, overriding the necessary default Mojito assets.
    #. If the client side gets deployed, Shaker also deploys itself to the client to serve future mojit calls.


=======
The Shaker Mojito addon is the run time component of Shaker. It reads the metadata generated by the Screwdriver compiler, and subsequently manages assets within the application, picking the correct rollup based on the current environment. 

The ShakerHTMLFrame is just a copy of Mojito HTMLFrame but including the addon and executing Shaker in a specific point in time.
If you have your own HTMLFrame you just have to include the addon dependency and execute it before the assets get pushed throw the view.


All the pieces together
##########
>>>>>>> Restructured shaker in preparation for open sourcing
